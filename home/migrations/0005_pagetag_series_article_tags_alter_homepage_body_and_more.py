# Generated by Django 4.0.5 on 2022-08-07 11:22

from django.db import migrations, models
import django.db.models.deletion
import home.blocks
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.table_block.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('home', '0004_article_image_homepage_image_alter_homepage_body'),
    ]

    operations = [
        migrations.CreateModel(
            name='PageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlisted', models.BooleanField(default=True)),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='home.PageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AlterField(
            model_name='homepage',
            name='body',
            field=wagtail.fields.StreamField([('AboutBlurb', wagtail.blocks.StructBlock([('tagline', wagtail.blocks.CharBlock()), ('column1_text', wagtail.blocks.RichTextBlock()), ('column2_text', wagtail.blocks.RichTextBlock()), ('page', wagtail.blocks.PageChooserBlock())])), ('JumbotronCard', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock())])), ('CardList', wagtail.blocks.StructBlock([('pages', wagtail.blocks.ListBlock(wagtail.blocks.PageChooserBlock()))])), ('LinesList', wagtail.blocks.StructBlock([('pages', wagtail.blocks.ListBlock(wagtail.blocks.PageChooserBlock())), ('include_images', wagtail.blocks.BooleanBlock(default=True, required=False))])), ('ContactForm', home.blocks.ContactForm()), ('columns', wagtail.blocks.StructBlock([('children', wagtail.blocks.ListBlock(home.blocks.ColumnBlock)), ('margin_y', wagtail.blocks.BooleanBlock(default=False, required=False)), ('margin_x', wagtail.blocks.BooleanBlock(default=False, required=False)), ('fullscreen', wagtail.blocks.BooleanBlock(default=False, required=False))])), ('spacer', home.blocks.SpacerBlock()), ('ImageHeader', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())])), ('ImageDivider', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())])), ('ImageCard', wagtail.blocks.StructBlock([('header', wagtail.blocks.CharBlock()), ('description', wagtail.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('link', wagtail.blocks.CharBlock()), ('link_text', wagtail.blocks.CharBlock())])), ('text', wagtail.blocks.RichTextBlock()), ('image_card', wagtail.blocks.StructBlock([('header', wagtail.blocks.CharBlock()), ('description', wagtail.blocks.CharBlock()), ('image', wagtail.images.blocks.ImageChooserBlock()), ('link', wagtail.blocks.CharBlock()), ('link_text', wagtail.blocks.CharBlock())])), ('image', wagtail.images.blocks.ImageChooserBlock(template='blocks/image.html')), ('table', wagtail.contrib.table_block.blocks.TableBlock())], blank=True, null=True, use_json_field=True),
        ),
        migrations.AddField(
            model_name='pagetag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='home.article'),
        ),
        migrations.AddField(
            model_name='pagetag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag'),
        ),
    ]
